@page "/Detail/{commonname}"
@page "/Detail"
@using ClientApp.Models
@using ClientApp.Services
@inject ICountryService CountryService
@inject IDownloadService DownloadService
@inject IXMLService XmlService
@inject IXLSService XlsService
@inject ICSVService CsvService


@if (_country == null)
{
    <div class="spinner-border back" role="status">
        <span class="sr-only"></span>
    </div>
    <style>
    .content {
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
    }
</style>
}
else
{
    
    <nav class="navbar bg-dark navbar-expand-lg border-bottom border-body p-2" data-bs-theme="dark">
        <div class="container-fluid">
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarTogglerDemo01" aria-controls="navbarTogglerDemo01" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarTogglerDemo01">
                <a class="navbar-brand">Details</a>
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">

                </ul>
                <div class="d-flex">
                    <button @onclick="OnXLS" class="btn btn-outline-success m-1" >Export XLS</button>
                    <button @onclick="OnCSV" class="btn btn-outline-success m-1">Export CSV</button>
                    <button @onclick="OnXML" class="btn btn-outline-success m-1">Export XML</button>
                </div>
            </div>
        </div>
    </nav>


    <div class="m-2">
    <div class="row">
        <div class="col-12 mb-5">
            <table class="table">
              <thead>
                <tr>
                    <th scope="col">Region</th>
                    <th scope="col">Subregion</th>
                    <th scope="col">Population</th>
                    <th scope="col">Area</th>
                    <th scope="col">Flag</th>
                </tr>
              </thead>
              <tbody>
              <tr>
                  <td>@Region</td>
                  <td>@Subregion</td>
                  <td>@Population</td>
                  <td>@Area</td>
                  <td><i class="bi bi-eye">
                      <img alt="Bandeira" height="25px" src="@Flag"/></i></td>
              </tr>

              </tbody>
            </table>
        </div>

        <div class="col-4">
            <h3 class="fw-bold">Names</h3>

            <ol class="list-group list-group-numbered">
                <li class="list-group-item d-flex justify-content-between list-group-item-action align-items-start">
                    <div class="ms-2 me-auto">
                        <div class="fw-bold">Common</div>
                        @CommonName
                    </div>
                </li>
                <li class="list-group-item d-flex justify-content-between list-group-item-action align-items-start">
                    <div class="ms-2 me-auto">
                        <div class="fw-bold">Native</div>
                        @NativeName
                    </div>
                </li>
            </ol>

        </div>

        <div class="col-4">
            <h3 class="fw-bold">Capitals</h3>
            <div class="list-group">

                @foreach (var capital in Capitals!)
                {
                    <a class="list-group-item list-group-item-action">@capital</a>
                }
            </div>
        </div>

        <div class="col-4">
            <h3 class="fw-bold">Timezones</h3>
            <div class="list-group">

                @foreach (var timezone in Timezones!)
                {
                    <a class="list-group-item list-group-item-action">@timezone</a>
                }
            </div>
        </div>

    </div>
</div>

@code {

    [Parameter]
    public string? CommonName { get; set; }
    private string? NativeName { get; set; }
    private List<string>? Capitals { get; set; } = new List<string>();
    private Country? _country;
    private List<string>? Timezones { get; set; } = new List<string>();
    private string? Region { get; set; }
    private string? Subregion { get; set; }
    private int? Population { get; set; } = 0;
    private double? Area { get; set; } = 0;
    private string? Flag { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (CommonName != null)
        {
            var countries = await CountryService.GetCountry(CommonName);

            _country = countries;
        }
        NativeName = Helper.GetName(_country);
        Capitals = _country?.Capital;
        Timezones = _country?.Timezones;
        Region = _country?.Region;
        Subregion = _country?.Subregion;
        Population = _country?.Population;
        Area = _country?.Area;
        Flag = _country?.Flags?.Png;
    }

    async Task OnXML()
    {
        if (_country != null) await DownloadService.DownloadDocumet(XmlService.getDocumentFrom(_country));
    }
    
    async Task OnCSV()
    {
        if (_country != null) await DownloadService.DownloadDocumet(CsvService.getDocumentFrom(_country));
    }
    
    async Task OnXLS()
    {
        if (_country != null) await DownloadService.DownloadDocumet(XlsService.getDocumentFrom(_country));
    }
}




    
}
